!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARRAY_SIZE	http_parser.c	41;"	d	file:
BIT_AT	http_parser.c	45;"	d	file:
CALLBACK_DATA	http_parser.c	104;"	d	file:
CALLBACK_DATA_	http_parser.c	84;"	d	file:
CALLBACK_DATA_NOADVANCE	http_parser.c	108;"	d	file:
CALLBACK_NOTIFY	http_parser.c	78;"	d	file:
CALLBACK_NOTIFY_	http_parser.c	61;"	d	file:
CALLBACK_NOTIFY_NOADVANCE	http_parser.c	81;"	d	file:
CHUNKED	http_parser.c	125;"	d	file:
CLOSE	http_parser.c	127;"	d	file:
CONNECTION	http_parser.c	121;"	d	file:
CONTENT_LENGTH	http_parser.c	122;"	d	file:
CR	http_parser.c	356;"	d	file:
CaseKeyCmp	lnethttp.h	/^struct CaseKeyCmp {$/;"	s
ELEM_AT	http_parser.c	51;"	d	file:
Event	httpparser.h	/^    enum Event {$/;"	g	class:HttpParser
F_CHUNKED	http_parser.h	/^  { F_CHUNKED               = 1 << 0$/;"	e	enum:flags
F_CONNECTION_CLOSE	http_parser.h	/^  , F_CONNECTION_CLOSE      = 1 << 2$/;"	e	enum:flags
F_CONNECTION_KEEP_ALIVE	http_parser.h	/^  , F_CONNECTION_KEEP_ALIVE = 1 << 1$/;"	e	enum:flags
F_SKIPBODY	http_parser.h	/^  , F_SKIPBODY              = 1 << 5$/;"	e	enum:flags
F_TRAILING	http_parser.h	/^  , F_TRAILING              = 1 << 3$/;"	e	enum:flags
F_UPGRADE	http_parser.h	/^  , F_UPGRADE               = 1 << 4$/;"	e	enum:flags
HTTPPARSER_ON_PARSE	httpparser.cpp	52;"	d	file:
HTTP_BOTH	http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_ERRNO_GEN	http_parser.h	183;"	d
HTTP_ERRNO_GEN	http_parser.h	187;"	d
HTTP_ERRNO_MAP	http_parser.h	/^  HTTP_ERRNO_MAP(HTTP_ERRNO_GEN)$/;"	e	enum:http_errno
HTTP_ERRNO_MAP	http_parser.h	140;"	d
HTTP_MAX_HEADER_SIZE	http_parser.h	56;"	d
HTTP_METHOD_MAP	http_parser.h	/^  HTTP_METHOD_MAP(XX)$/;"	e	enum:http_method
HTTP_METHOD_MAP	http_parser.h	81;"	d
HTTP_PARSER_ERRNO	http_parser.h	191;"	d
HTTP_PARSER_STRICT	http_parser.h	52;"	d
HTTP_PARSER_VERSION_MAJOR	http_parser.h	28;"	d
HTTP_PARSER_VERSION_MINOR	http_parser.h	29;"	d
HTTP_PARSER_VERSION_PATCH	http_parser.h	30;"	d
HTTP_REQUEST	http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_RESPONSE	http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_STRERROR_GEN	http_parser.c	402;"	d	file:
HTTP_STRERROR_GEN	http_parser.c	409;"	d	file:
HttpError	lnethttp.h	/^    HttpError(int pcode = 200, const std::string &msg = "")$/;"	f	struct:HttpError
HttpError	lnethttp.h	/^struct HttpError {$/;"	s
HttpParser	httpparser.cpp	/^HttpParser::HttpParser(enum http_parser_type type) {$/;"	f	class:HttpParser
HttpParser	httpparser.h	/^class HttpParser {$/;"	c
HttpParserSettings	httpparser.cpp	/^HttpParserSettings::HttpParserSettings() {$/;"	f	class:HttpParserSettings
HttpParserSettings	httpparser.cpp	/^class HttpParserSettings {$/;"	c	file:
HttpRequest	httprequest.cpp	/^HttpRequest::HttpRequest() $/;"	f	class:HttpRequest
HttpRequest	httprequest.h	/^class HttpRequest {$/;"	c
HttpUtil	httputil.h	/^class HttpUtil {$/;"	c
IS_ALPHA	http_parser.c	359;"	d	file:
IS_ALPHANUM	http_parser.c	361;"	d	file:
IS_HEX	http_parser.c	362;"	d	file:
IS_HOST_CHAR	http_parser.c	373;"	d	file:
IS_HOST_CHAR	http_parser.c	378;"	d	file:
IS_MARK	http_parser.c	363;"	d	file:
IS_NUM	http_parser.c	360;"	d	file:
IS_URL_CHAR	http_parser.c	372;"	d	file:
IS_URL_CHAR	http_parser.c	376;"	d	file:
IS_USERINFO_CHAR	http_parser.c	366;"	d	file:
KEEP_ALIVE	http_parser.c	126;"	d	file:
LF	http_parser.c	357;"	d	file:
LOWER	http_parser.c	358;"	d	file:
MARK	http_parser.c	112;"	d	file:
MIN	http_parser.c	37;"	d	file:
Message	httputil.cpp	/^    Message() {$/;"	f	class:Message
Message	httputil.cpp	/^class Message {$/;"	c	file:
NEW_MESSAGE	http_parser.c	394;"	d	file:
NEW_MESSAGE	http_parser.c	397;"	d	file:
PARSING_HEADER	http_parser.c	312;"	d	file:
PROXY_CONNECTION	http_parser.c	120;"	d	file:
ParserBody	httpparser.h	/^        ParserBody,$/;"	e	enum:HttpParser::Event
ParserHeaderField	httpparser.h	/^        ParserHeaderField,$/;"	e	enum:HttpParser::Event
ParserHeaderValue	httpparser.h	/^        ParserHeaderValue,$/;"	e	enum:HttpParser::Event
ParserHeadersComplete	httpparser.h	/^        ParserHeadersComplete,$/;"	e	enum:HttpParser::Event
ParserMessageBegin	httpparser.h	/^        ParserMessageBegin,$/;"	e	enum:HttpParser::Event
ParserMessageComplete	httpparser.h	/^        ParserMessageComplete$/;"	e	enum:HttpParser::Event
ParserStatusComplete	httpparser.h	/^        ParserStatusComplete,$/;"	e	enum:HttpParser::Event
ParserUrl	httpparser.h	/^        ParserUrl,$/;"	e	enum:HttpParser::Event
SET_ERRNO	http_parser.c	54;"	d	file:
STRICT_CHECK	http_parser.c	387;"	d	file:
STRICT_CHECK	http_parser.c	396;"	d	file:
T	http_parser.c	193;"	d	file:
T	http_parser.c	195;"	d	file:
T	http_parser.c	233;"	d	file:
TOKEN	http_parser.c	371;"	d	file:
TOKEN	http_parser.c	375;"	d	file:
TRANSFER_ENCODING	http_parser.c	123;"	d	file:
UF_FRAGMENT	http_parser.h	/^  , UF_FRAGMENT         = 5$/;"	e	enum:http_parser_url_fields
UF_HOST	http_parser.h	/^  , UF_HOST             = 1$/;"	e	enum:http_parser_url_fields
UF_MAX	http_parser.h	/^  , UF_MAX              = 7$/;"	e	enum:http_parser_url_fields
UF_PATH	http_parser.h	/^  , UF_PATH             = 3$/;"	e	enum:http_parser_url_fields
UF_PORT	http_parser.h	/^  , UF_PORT             = 2$/;"	e	enum:http_parser_url_fields
UF_QUERY	http_parser.h	/^  , UF_QUERY            = 4$/;"	e	enum:http_parser_url_fields
UF_SCHEMA	http_parser.h	/^  { UF_SCHEMA           = 0$/;"	e	enum:http_parser_url_fields
UF_USERINFO	http_parser.h	/^  , UF_USERINFO         = 6$/;"	e	enum:http_parser_url_fields
ULLONG_MAX	http_parser.c	33;"	d	file:
UPGRADE	http_parser.c	124;"	d	file:
XX	http_parser.c	132;"	d	file:
XX	http_parser.c	134;"	d	file:
XX	http_parser.h	116;"	d
XX	http_parser.h	118;"	d
__LNET_HTTPPARSER_H__	httpparser.h	19;"	d
__LNET_HTTPREQUEST_H__	httprequest.h	19;"	d
__LNET_HTTPUTIL_H__	httputil.h	19;"	d
__LNET_HTTP_H__	lnethttp.h	19;"	d
body	httprequest.h	/^    std::string body;$/;"	m	class:HttpRequest
code	lnethttp.h	/^    int code;$/;"	m	struct:HttpError
codeMessage	httputil.cpp	/^const string& HttpUtil::codeMessage(int code) {$/;"	f	class:HttpUtil
content_length	http_parser.h	/^  uint64_t content_length; \/* # bytes in body (0 if no Content-Length header) *\/$/;"	m	struct:http_parser
data	http_parser.h	/^  void *data; \/* A pointer to get hook to the "connection" or "socket" object *\/$/;"	m	struct:http_parser
description	http_parser.c	/^  const char *description;$/;"	m	struct:__anon2	file:
escape	httputil.cpp	/^string HttpUtil::escape(const std::string &str) {$/;"	f	class:HttpUtil
execute	httpparser.cpp	/^int HttpParser::execute(const char *buf, size_t count) {$/;"	f	class:HttpParser
field_data	http_parser.h	/^  } field_data[UF_MAX];$/;"	m	struct:http_parser_url	typeref:struct:http_parser_url::__anon1
field_set	http_parser.h	/^  uint16_t field_set;           \/* Bitmask of (1 << UF_*) values *\/$/;"	m	struct:http_parser_url
flags	http_parser.h	/^  unsigned char flags : 6;    \/* F_* values from 'flags' enum; semi-public *\/$/;"	m	struct:http_parser
flags	http_parser.h	/^enum flags$/;"	g
getMessage	httputil.cpp	/^    const string& getMessage(int code) {$/;"	f	class:Message
getType	httpparser.h	/^    enum http_parser_type getType() { return (http_parser_type)m_parser.type; }$/;"	f	class:HttpParser
h_C	http_parser.c	/^  , h_C$/;"	e	enum:header_states	file:
h_CO	http_parser.c	/^  , h_CO$/;"	e	enum:header_states	file:
h_CON	http_parser.c	/^  , h_CON$/;"	e	enum:header_states	file:
h_connection	http_parser.c	/^  , h_connection$/;"	e	enum:header_states	file:
h_connection_close	http_parser.c	/^  , h_connection_close$/;"	e	enum:header_states	file:
h_connection_keep_alive	http_parser.c	/^  , h_connection_keep_alive$/;"	e	enum:header_states	file:
h_content_length	http_parser.c	/^  , h_content_length$/;"	e	enum:header_states	file:
h_general	http_parser.c	/^  { h_general = 0$/;"	e	enum:header_states	file:
h_matching_connection	http_parser.c	/^  , h_matching_connection$/;"	e	enum:header_states	file:
h_matching_connection_close	http_parser.c	/^  , h_matching_connection_close$/;"	e	enum:header_states	file:
h_matching_connection_keep_alive	http_parser.c	/^  , h_matching_connection_keep_alive$/;"	e	enum:header_states	file:
h_matching_content_length	http_parser.c	/^  , h_matching_content_length$/;"	e	enum:header_states	file:
h_matching_proxy_connection	http_parser.c	/^  , h_matching_proxy_connection$/;"	e	enum:header_states	file:
h_matching_transfer_encoding	http_parser.c	/^  , h_matching_transfer_encoding$/;"	e	enum:header_states	file:
h_matching_transfer_encoding_chunked	http_parser.c	/^  , h_matching_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_matching_upgrade	http_parser.c	/^  , h_matching_upgrade$/;"	e	enum:header_states	file:
h_transfer_encoding	http_parser.c	/^  , h_transfer_encoding$/;"	e	enum:header_states	file:
h_transfer_encoding_chunked	http_parser.c	/^  , h_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_upgrade	http_parser.c	/^  , h_upgrade$/;"	e	enum:header_states	file:
handleHeaderField	httpparser.cpp	/^int HttpParser::handleHeaderField(const char* at, size_t length) {$/;"	f	class:HttpParser
handleHeaderValue	httpparser.cpp	/^int HttpParser::handleHeaderValue(const char* at, size_t length) {$/;"	f	class:HttpParser
handleHeadersComplete	httpparser.cpp	/^int HttpParser::handleHeadersComplete() {$/;"	f	class:HttpParser
handleMessageBegin	httpparser.cpp	/^int HttpParser::handleMessageBegin() {$/;"	f	class:HttpParser
header	httprequest.h	/^    Headers header;$/;"	m	class:HttpRequest
header_state	http_parser.h	/^  unsigned char header_state; \/* enum header_state from http_parser.c *\/$/;"	m	struct:http_parser
header_states	http_parser.c	/^enum header_states$/;"	g	file:
host	httprequest.h	/^    std::string host;$/;"	m	class:HttpRequest
http_body_is_final	http_parser.c	/^http_body_is_final(const struct http_parser *parser) {$/;"	f
http_cb	http_parser.h	/^typedef int (*http_cb) (http_parser*);$/;"	t
http_data_cb	http_parser.h	/^typedef int (*http_data_cb) (http_parser*, const char *at, size_t length);$/;"	t
http_errno	http_parser.h	/^  unsigned char http_errno : 7;$/;"	m	struct:http_parser
http_errno	http_parser.h	/^enum http_errno {$/;"	g
http_errno_description	http_parser.c	/^http_errno_description(enum http_errno err) {$/;"	f
http_errno_name	http_parser.c	/^http_errno_name(enum http_errno err) {$/;"	f
http_host_state	http_parser.c	/^enum http_host_state$/;"	g	file:
http_major	http_parser.h	/^  unsigned short http_major;$/;"	m	struct:http_parser
http_message_needs_eof	http_parser.c	/^http_message_needs_eof (const http_parser *parser)$/;"	f
http_method	http_parser.h	/^enum http_method$/;"	g
http_method_str	http_parser.c	/^http_method_str (enum http_method m)$/;"	f
http_minor	http_parser.h	/^  unsigned short http_minor;$/;"	m	struct:http_parser
http_parse_host	http_parser.c	/^http_parse_host(const char * buf, struct http_parser_url *u, int found_at) {$/;"	f	file:
http_parse_host_char	http_parser.c	/^http_parse_host_char(enum http_host_state s, const char ch) {$/;"	f	file:
http_parser	http_parser.h	/^struct http_parser {$/;"	s
http_parser	http_parser.h	/^typedef struct http_parser http_parser;$/;"	t	typeref:struct:http_parser
http_parser_execute	http_parser.c	/^size_t http_parser_execute (http_parser *parser,$/;"	f
http_parser_h	http_parser.h	22;"	d
http_parser_init	http_parser.c	/^http_parser_init (http_parser *parser, enum http_parser_type t)$/;"	f
http_parser_parse_url	http_parser.c	/^http_parser_parse_url(const char *buf, size_t buflen, int is_connect,$/;"	f
http_parser_pause	http_parser.c	/^http_parser_pause(http_parser *parser, int paused) {$/;"	f
http_parser_settings	http_parser.h	/^struct http_parser_settings {$/;"	s
http_parser_settings	http_parser.h	/^typedef struct http_parser_settings http_parser_settings;$/;"	t	typeref:struct:http_parser_settings
http_parser_type	http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	g
http_parser_url	http_parser.h	/^struct http_parser_url {$/;"	s
http_parser_url_fields	http_parser.h	/^enum http_parser_url_fields$/;"	g
http_parser_version	http_parser.c	/^http_parser_version(void) {$/;"	f
http_should_keep_alive	http_parser.c	/^http_should_keep_alive (const http_parser *parser)$/;"	f
http_strerror_tab	http_parser.c	/^} http_strerror_tab[] = {$/;"	v	typeref:struct:__anon2	file:
index	http_parser.h	/^  unsigned char index;        \/* index into current matcher *\/$/;"	m	struct:http_parser
int16_t	http_parser.h	/^typedef __int16 int16_t;$/;"	t
int32_t	http_parser.h	/^typedef __int32 int32_t;$/;"	t
int64_t	http_parser.h	/^typedef __int64 int64_t;$/;"	t
int8_t	http_parser.h	/^typedef __int8 int8_t;$/;"	t
len	http_parser.h	/^    uint16_t len;               \/* Length of run in buffer *\/$/;"	m	struct:http_parser_url::__anon1
m_errorCode	httpparser.h	/^    int m_errorCode;$/;"	m	class:HttpParser
m_field	httpparser.h	/^    std::string m_field;$/;"	m	class:HttpParser
m_lastWasValue	httpparser.h	/^    bool m_lastWasValue;$/;"	m	class:HttpParser
m_message	httputil.cpp	/^    vector<string> m_message;$/;"	m	class:Message	file:
m_parser	httpparser.h	/^    struct http_parser m_parser;$/;"	m	class:HttpParser	typeref:struct:HttpParser::http_parser
m_value	httpparser.h	/^    std::string m_value;$/;"	m	class:HttpParser
majorVersion	httprequest.h	/^    unsigned short majorVersion;$/;"	m	class:HttpRequest
message	lnethttp.h	/^    std::string message;$/;"	m	struct:HttpError
method	http_parser.h	/^  unsigned char method;       \/* requests only *\/$/;"	m	struct:http_parser
method	httprequest.h	/^    http_method method;$/;"	m	class:HttpRequest
method2String	httputil.cpp	/^const char* HttpUtil::method2String(uint8_t method) {$/;"	f	class:HttpUtil
method_strings	http_parser.c	/^static const char *method_strings[] =$/;"	v	file:
minorVersion	httprequest.h	/^    unsigned short minorVersion;$/;"	m	class:HttpRequest
ms_settings	httpparser.cpp	/^struct http_parser_settings ms_settings;$/;"	v	typeref:struct:http_parser_settings
name	http_parser.c	/^  const char *name;$/;"	m	struct:__anon2	file:
normal_url_char	http_parser.c	/^static const uint8_t normal_url_char[32] = {$/;"	v	file:
normalizeHeader	httputil.cpp	/^string HttpUtil::normalizeHeader(const std::string &str) {$/;"	f	class:HttpUtil
nread	http_parser.h	/^  uint32_t nread;          \/* # bytes read in various scenarios *\/$/;"	m	struct:http_parser
off	http_parser.h	/^    uint16_t off;               \/* Offset into buffer in which field starts *\/$/;"	m	struct:http_parser_url::__anon1
onBody	httpparser.cpp	/^int HttpParserSettings::onBody(struct http_parser *parser, const char *at, size_t length) {$/;"	f	class:HttpParserSettings
onBody	httpparser.h	/^    virtual int onBody(const char*, size_t) { return 0; }$/;"	f	class:HttpParser
onError	httpparser.h	/^    virtual int onError(const HttpError &error) {  return 0;}$/;"	f	class:HttpParser
onHeader	httpparser.h	/^    virtual int onHeader(const std::string &field, const std::string &value) { return 0; }$/;"	f	class:HttpParser
onHeaderField	httpparser.cpp	/^int HttpParserSettings::onHeaderField(struct http_parser *parser, const char *at, size_t length) {$/;"	f	class:HttpParserSettings
onHeaderValue	httpparser.cpp	/^int HttpParserSettings::onHeaderValue(struct http_parser *parser, const char *at, size_t length) {$/;"	f	class:HttpParserSettings
onHeadersComplete	httpparser.cpp	/^int HttpParserSettings::onHeadersComplete(struct http_parser *parser) {$/;"	f	class:HttpParserSettings
onHeadersComplete	httpparser.h	/^    virtual int onHeadersComplete() { return 0; }$/;"	f	class:HttpParser
onMessageBegin	httpparser.cpp	/^int HttpParserSettings::onMessageBegin(struct http_parser *parser) {$/;"	f	class:HttpParserSettings
onMessageBegin	httpparser.h	/^    virtual int onMessageBegin() { return 0; }$/;"	f	class:HttpParser
onMessageComplete	httpparser.cpp	/^int HttpParserSettings::onMessageComplete(struct http_parser *parser) {$/;"	f	class:HttpParserSettings
onMessageComplete	httpparser.h	/^    virtual int onMessageComplete() { return 0; }$/;"	f	class:HttpParser
onParser	httpparser.cpp	/^int HttpParser::onParser(Event event, const char *at, size_t length) {$/;"	f	class:HttpParser
onStatusComplete	httpparser.cpp	/^int HttpParserSettings::onStatusComplete(struct http_parser *parser) {$/;"	f	class:HttpParserSettings
onUpgrade	httpparser.h	/^    virtual int onUpgrade(const char*, size_t) { return 0; }$/;"	f	class:HttpParser
onUrl	httpparser.cpp	/^int HttpParserSettings::onUrl(struct http_parser *parser, const char *at, size_t length) {$/;"	f	class:HttpParserSettings
onUrl	httpparser.h	/^    virtual int onUrl(const char*, size_t) { return 0; }$/;"	f	class:HttpParser
on_body	http_parser.h	/^  http_data_cb on_body;$/;"	m	struct:http_parser_settings
on_header_field	http_parser.h	/^  http_data_cb on_header_field;$/;"	m	struct:http_parser_settings
on_header_value	http_parser.h	/^  http_data_cb on_header_value;$/;"	m	struct:http_parser_settings
on_headers_complete	http_parser.h	/^  http_cb      on_headers_complete;$/;"	m	struct:http_parser_settings
on_message_begin	http_parser.h	/^  http_cb      on_message_begin;$/;"	m	struct:http_parser_settings
on_message_complete	http_parser.h	/^  http_cb      on_message_complete;$/;"	m	struct:http_parser_settings
on_status_complete	http_parser.h	/^  http_cb      on_status_complete;$/;"	m	struct:http_parser_settings
on_url	http_parser.h	/^  http_data_cb on_url;$/;"	m	struct:http_parser_settings
operator ()	lnethttp.h	/^    bool operator() (const std::string &str1, const std::string &str2) const {$/;"	f	struct:CaseKeyCmp
params	httprequest.h	/^    Params params;$/;"	m	class:HttpRequest
parse_url_char	http_parser.c	/^parse_url_char(enum state s, const char ch)$/;"	f	file:
path	httprequest.h	/^    std::string path;$/;"	m	class:HttpRequest
port	http_parser.h	/^  uint16_t port;                \/* Converted UF_PORT string *\/$/;"	m	struct:http_parser_url
port	httprequest.h	/^    uint16_t port;$/;"	m	class:HttpRequest
query	httprequest.h	/^    std::string query;$/;"	m	class:HttpRequest
s_body_identity	http_parser.c	/^  , s_body_identity$/;"	e	enum:state	file:
s_body_identity_eof	http_parser.c	/^  , s_body_identity_eof$/;"	e	enum:state	file:
s_chunk_data	http_parser.c	/^  , s_chunk_data$/;"	e	enum:state	file:
s_chunk_data_almost_done	http_parser.c	/^  , s_chunk_data_almost_done$/;"	e	enum:state	file:
s_chunk_data_done	http_parser.c	/^  , s_chunk_data_done$/;"	e	enum:state	file:
s_chunk_parameters	http_parser.c	/^  , s_chunk_parameters$/;"	e	enum:state	file:
s_chunk_size	http_parser.c	/^  , s_chunk_size$/;"	e	enum:state	file:
s_chunk_size_almost_done	http_parser.c	/^  , s_chunk_size_almost_done$/;"	e	enum:state	file:
s_chunk_size_start	http_parser.c	/^  , s_chunk_size_start$/;"	e	enum:state	file:
s_dead	http_parser.c	/^  { s_dead = 1 \/* important that this is > 0 *\/$/;"	e	enum:state	file:
s_dec2hex	httputil.cpp	/^static const char s_dec2hex[17] = "0123456789ABCDEF";$/;"	v	file:
s_header_almost_done	http_parser.c	/^  , s_header_almost_done$/;"	e	enum:state	file:
s_header_field	http_parser.c	/^  , s_header_field$/;"	e	enum:state	file:
s_header_field_start	http_parser.c	/^  , s_header_field_start$/;"	e	enum:state	file:
s_header_value	http_parser.c	/^  , s_header_value$/;"	e	enum:state	file:
s_header_value_lws	http_parser.c	/^  , s_header_value_lws$/;"	e	enum:state	file:
s_header_value_start	http_parser.c	/^  , s_header_value_start$/;"	e	enum:state	file:
s_headers_almost_done	http_parser.c	/^  , s_headers_almost_done$/;"	e	enum:state	file:
s_headers_done	http_parser.c	/^  , s_headers_done$/;"	e	enum:state	file:
s_hex2dec	httputil.cpp	/^static const char s_hex2dec[256] = {$/;"	v	file:
s_http_host	http_parser.c	/^  , s_http_host$/;"	e	enum:http_host_state	file:
s_http_host_dead	http_parser.c	/^    s_http_host_dead = 1$/;"	e	enum:http_host_state	file:
s_http_host_port	http_parser.c	/^  , s_http_host_port$/;"	e	enum:http_host_state	file:
s_http_host_port_start	http_parser.c	/^  , s_http_host_port_start$/;"	e	enum:http_host_state	file:
s_http_host_start	http_parser.c	/^  , s_http_host_start$/;"	e	enum:http_host_state	file:
s_http_host_v6	http_parser.c	/^  , s_http_host_v6$/;"	e	enum:http_host_state	file:
s_http_host_v6_end	http_parser.c	/^  , s_http_host_v6_end$/;"	e	enum:http_host_state	file:
s_http_host_v6_start	http_parser.c	/^  , s_http_host_v6_start$/;"	e	enum:http_host_state	file:
s_http_userinfo	http_parser.c	/^  , s_http_userinfo$/;"	e	enum:http_host_state	file:
s_http_userinfo_start	http_parser.c	/^  , s_http_userinfo_start$/;"	e	enum:http_host_state	file:
s_initHttpParserSetting	httpparser.cpp	/^static HttpParserSettings s_initHttpParserSetting;$/;"	v	file:
s_message	httputil.cpp	/^static Message s_message;$/;"	v	file:
s_message_done	http_parser.c	/^  , s_message_done$/;"	e	enum:state	file:
s_req_first_http_major	http_parser.c	/^  , s_req_first_http_major$/;"	e	enum:state	file:
s_req_first_http_minor	http_parser.c	/^  , s_req_first_http_minor$/;"	e	enum:state	file:
s_req_fragment	http_parser.c	/^  , s_req_fragment$/;"	e	enum:state	file:
s_req_fragment_start	http_parser.c	/^  , s_req_fragment_start$/;"	e	enum:state	file:
s_req_http_H	http_parser.c	/^  , s_req_http_H$/;"	e	enum:state	file:
s_req_http_HT	http_parser.c	/^  , s_req_http_HT$/;"	e	enum:state	file:
s_req_http_HTT	http_parser.c	/^  , s_req_http_HTT$/;"	e	enum:state	file:
s_req_http_HTTP	http_parser.c	/^  , s_req_http_HTTP$/;"	e	enum:state	file:
s_req_http_major	http_parser.c	/^  , s_req_http_major$/;"	e	enum:state	file:
s_req_http_minor	http_parser.c	/^  , s_req_http_minor$/;"	e	enum:state	file:
s_req_http_start	http_parser.c	/^  , s_req_http_start$/;"	e	enum:state	file:
s_req_line_almost_done	http_parser.c	/^  , s_req_line_almost_done$/;"	e	enum:state	file:
s_req_method	http_parser.c	/^  , s_req_method$/;"	e	enum:state	file:
s_req_path	http_parser.c	/^  , s_req_path$/;"	e	enum:state	file:
s_req_query_string	http_parser.c	/^  , s_req_query_string$/;"	e	enum:state	file:
s_req_query_string_start	http_parser.c	/^  , s_req_query_string_start$/;"	e	enum:state	file:
s_req_schema	http_parser.c	/^  , s_req_schema$/;"	e	enum:state	file:
s_req_schema_slash	http_parser.c	/^  , s_req_schema_slash$/;"	e	enum:state	file:
s_req_schema_slash_slash	http_parser.c	/^  , s_req_schema_slash_slash$/;"	e	enum:state	file:
s_req_server	http_parser.c	/^  , s_req_server$/;"	e	enum:state	file:
s_req_server_start	http_parser.c	/^  , s_req_server_start$/;"	e	enum:state	file:
s_req_server_with_at	http_parser.c	/^  , s_req_server_with_at$/;"	e	enum:state	file:
s_req_spaces_before_url	http_parser.c	/^  , s_req_spaces_before_url$/;"	e	enum:state	file:
s_res_H	http_parser.c	/^  , s_res_H$/;"	e	enum:state	file:
s_res_HT	http_parser.c	/^  , s_res_HT$/;"	e	enum:state	file:
s_res_HTT	http_parser.c	/^  , s_res_HTT$/;"	e	enum:state	file:
s_res_HTTP	http_parser.c	/^  , s_res_HTTP$/;"	e	enum:state	file:
s_res_first_http_major	http_parser.c	/^  , s_res_first_http_major$/;"	e	enum:state	file:
s_res_first_http_minor	http_parser.c	/^  , s_res_first_http_minor$/;"	e	enum:state	file:
s_res_first_status_code	http_parser.c	/^  , s_res_first_status_code$/;"	e	enum:state	file:
s_res_http_major	http_parser.c	/^  , s_res_http_major$/;"	e	enum:state	file:
s_res_http_minor	http_parser.c	/^  , s_res_http_minor$/;"	e	enum:state	file:
s_res_line_almost_done	http_parser.c	/^  , s_res_line_almost_done$/;"	e	enum:state	file:
s_res_or_resp_H	http_parser.c	/^  , s_res_or_resp_H$/;"	e	enum:state	file:
s_res_status	http_parser.c	/^  , s_res_status$/;"	e	enum:state	file:
s_res_status_code	http_parser.c	/^  , s_res_status_code$/;"	e	enum:state	file:
s_safe	httputil.cpp	/^const char s_safe[256] = {$/;"	v
s_start_req	http_parser.c	/^  , s_start_req$/;"	e	enum:state	file:
s_start_req_or_res	http_parser.c	/^  , s_start_req_or_res$/;"	e	enum:state	file:
s_start_res	http_parser.c	/^  , s_start_res$/;"	e	enum:state	file:
schema	httprequest.h	/^    std::string schema;$/;"	m	class:HttpRequest
start_state	http_parser.c	383;"	d	file:
state	http_parser.c	/^enum state$/;"	g	file:
state	http_parser.h	/^  unsigned char state;        \/* enum state from http_parser.c *\/$/;"	m	struct:http_parser
status_code	http_parser.h	/^  unsigned short status_code; \/* responses only *\/$/;"	m	struct:http_parser
tokens	http_parser.c	/^static const char tokens[256] = {$/;"	v	file:
type	http_parser.h	/^  unsigned char type : 2;     \/* enum http_parser_type *\/$/;"	m	struct:http_parser
uint16_t	http_parser.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint32_t	http_parser.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64_t	http_parser.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	http_parser.h	/^typedef unsigned __int8 uint8_t;$/;"	t
unescape	httputil.cpp	/^string HttpUtil::unescape(const std::string &str) {$/;"	f	class:HttpUtil
unhex	http_parser.c	/^static const int8_t unhex[256] =$/;"	v	file:
unknown	httputil.cpp	/^    static string unknown;$/;"	m	class:Message	file:
unknown	httputil.cpp	/^string Message::unknown = "Unknown Error";$/;"	m	class:Message	file:
upgrade	http_parser.h	/^  unsigned char upgrade : 1;$/;"	m	struct:http_parser
url	httprequest.h	/^    std::string url;$/;"	m	class:HttpRequest
~HttpParser	httpparser.cpp	/^HttpParser::~HttpParser() {$/;"	f	class:HttpParser
